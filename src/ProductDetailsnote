// import React, { useEffect, useState, useRef } from 'react';
// import { useParams } from 'react-router-dom';
// import axios from 'axios';
// import './ProductDetails.css';

// const ProductDetails = () => {
//     const { id } = useParams();
//     const [product, setProduct] = useState(null);
//     const [loading, setLoading] = useState(true);
//     const [error, setError] = useState(null);
//     const [currentVariant, setCurrentVariant] = useState(null);
//     const [variantImages, setVariantImages] = useState([]);
//     const [currentIndex, setCurrentIndex] = useState(0);
//     const [dimensions, setDimensions] = useState([]);
//     const sliderRef = useRef();
//     const [variants, setVariants] = useState([]);

//     useEffect(() => {
//         const fetchProduct = async () => {
//             try {
//                 const productResponse = await axios.get(`http://localhost:8080/api/products/${id}`);
//                 setProduct(productResponse.data);

//                 const variantResponse = await axios.get(`http://localhost:8080/api/products/${id}/variants`);
//                 const fetchedVariants = variantResponse.data;
//                 setVariants(fetchedVariants);

//                 if (fetchedVariants.length > 0) {
//                     setCurrentVariant(fetchedVariants[0]);
//                     setVariantImages(getFirstImagePerColor(fetchedVariants));
//                     setDimensions(getUniqueDimensionsForVariant(fetchedVariants, fetchedVariants[0]));
//                 }

//                 setLoading(false);
//             } catch (error) {
//                 setError('Error fetching product details');
//                 setLoading(false);
//             }
//         };

//         fetchProduct();
//     }, [id]);

//     const getUniqueDimensionsForVariant = (variants, selectedVariant) => {
//         const filteredVariants = variants.filter((variant) => variant.color === selectedVariant.color);
//         return [...new Set(filteredVariants.map((variant) => variant.dimensions))];
//     };

//     const getFirstImagePerColor = (variants) => {
//         const seenColors = new Set();
//         const uniqueImages = [];

//         variants.forEach((variant) => {
//             if (!seenColors.has(variant.color)) {
//                 seenColors.add(variant.color);
//                 uniqueImages.push(variant.images[0]);
//             }
//         });

//         return uniqueImages;
//     };

//     const handleDotClick = (index) => {
//         setCurrentIndex(index);
//         const scrollTo = sliderRef.current.clientWidth * index;
//         sliderRef.current.scrollTo({ left: scrollTo, behavior: 'smooth' });
//     };

//     const handleVariantClick = (selectedVariant) => {
//         setCurrentVariant(selectedVariant);
//         setDimensions(getUniqueDimensionsForVariant(variants, selectedVariant));
//     };
//     const handleVariantMouseOver = (selectedVariant) => {
//         setCurrentVariant(selectedVariant);
//         setDimensions(getUniqueDimensionsForVariant(variants, selectedVariant));
//     };

//     const handleDimensionChange = (event) => {
//         const selectedDimension = event.target.value;
//         handleVariantClick(variants.find(v => v.color === currentVariant.color && v.dimensions === selectedDimension));
//     };

//     const handleScroll = () => {
//         const slider = sliderRef.current;
//         const imageWidth = slider.clientWidth;
//         const newIndex = Math.round(slider.scrollLeft / imageWidth);
//         setCurrentIndex(newIndex);
//     };

//     useEffect(() => {
//         const slider = sliderRef.current;
//         if (slider) {
//             slider.addEventListener('scroll', handleScroll);
//             return () => slider.removeEventListener('scroll', handleScroll);
//         }
//     }, []);

//     if (loading) return <div>Loading...</div>;
//     if (error) return <div>{error}</div>;
//     if (!product) return <div>Product not found</div>;

//     return (
//         <div className="product-detail-container">
//             <div className="slider-wrapper">
//                 <div className="slider-container" ref={sliderRef}>
//                     {currentVariant && currentVariant.images.map((image, index) => (
//                         <img
//                             key={index}
//                             src={`data:image/jpeg;base64,${image}`}
//                             alt={`Variant Image ${index}`}
//                             className={`large-image ${currentIndex === index ? 'active' : ''}`}
//                         />
//                     ))}
//                 </div>

//                 <div className="dot-container">
//                     {currentVariant && currentVariant.images.map((_, index) => (
//                         <span
//                             key={index}
//                             className={`dot ${currentIndex === index ? 'active' : ''}`}
//                             onClick={() => handleDotClick(index)}
//                         ></span>
//                     ))}
//                 </div>
//             </div>

//             <div className="small-images-container">
//                 {currentVariant && (
//                     <div className="small-image-container">
//                         <img
//                             src={`data:image/jpeg;base64,${currentVariant.images[0]}`}
//                             alt="Main Thumbnail"
//                             className="small-image"
//                             onClick={() => handleDotClick(0)}
//                         />
//                     </div>
//                 )}

//                 {currentVariant && currentVariant.images.slice(1).map((image, index) => (
//                     <div key={index} className="small-image-container">
//                         <img
//                             src={`data:image/jpeg;base64,${image}`}
//                             alt={`Thumbnail ${index + 1}`}
//                             className="small-image"
//                             onClick={() => handleDotClick(index + 1)}
//                         />
//                     </div>
//                 ))}
//             </div>

//             <div className="right-section">
//     <h5>{product.name}</h5>
//     <p>â‚¹{currentVariant ? currentVariant.price.toFixed(2) : '0.00'}</p>
//     <p className={currentVariant && currentVariant.stock > 0 ? "in-stock" : "out-of-stock"}>
//         {currentVariant && currentVariant.stock > 0 ? 'In Stock' : 'Out of Stock'}
//     </p>

//     {/* Color Options */}
//     <div className="color-buttons">
//         <h6>Select Colors:</h6>
//         <div className="variant-images">
//             {variantImages.length > 0 ? (
//                 variantImages.map((image, index) => (
//                     <div
//                         key={index}
//                         onMouseOver={() => handleVariantMouseOver(variants[index])}
//                         className={`variant-image ${currentVariant?.color === variants[index].color ? 'active' : ''}`}
//                         style={{
//                             height: '100px', // Adjust the height of the container
//                             width: '50px',}}
                        
//                     >
//                         <img src={`data:image/jpeg;base64,${image}`} alt={`Variant ${index + 1}`} />
//                         <p className="color-name">{variants[index].color}</p> {/* Color name under the image */}
//                     </div>
//                 ))
//             ) : (
//                 <p>No color options available.</p> // Fallback message if no variants exist
//             )}
//         </div>

//         <div>
//             {currentVariant ? (
//                 <p><strong>Color:</strong> {currentVariant.color}</p>
//             ) : (
//                 <p>No variant selected.</p> // Handle case when no variant is selected
//             )}
//         </div>
//     </div>

//     {/* Dimension Dropdown */}
//     {currentVariant && (
//         <div className="dimension-dropdown" style={{fontSize:12}}>
//             <h6>Select Dimensions:</h6>
//             <select onChange={handleDimensionChange} value={currentVariant?.dimensions || ''}>
//                 {dimensions.map((dimension, index) => (
//                     <option key={index} value={dimension}>
//                         {dimension}
//                     </option>
//                 ))}
//             </select>
//         </div>
//     )}

//     {/* Variant Info */}
//     {currentVariant && (
//         <div className="variant-info">
//             <p><strong>Dimensions:</strong> {currentVariant.dimensions}</p>
//         </div>
//     )}

//     {/* Description */}
//     <p><strong>Description:</strong> {currentVariant ? currentVariant.description : product?.description}</p>
// </div>

//         </div>
//     );
// };

// export default ProductDetails;
